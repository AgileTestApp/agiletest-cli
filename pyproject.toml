[project]
name = "agiletest-cli"

description = "AgileTest.app Command Line Interface"
version = "0.0.1"

authors = [{ name = "Trung Le", email = "trung.le@devsamurai.com" }]

requires-python = ">=3.10"

dependencies = [
  "click==8.1.7",
  "pyjwt==2.9.0",
  "python-dotenv==1.0.1",
  "httpx==0.27.0",
]
[project.optional-dependencies]
dev = [
  "black",
  "isort",
  "mkdocs",
  "mkdocs-click",
  "mkdocs-material",
  "mkdocs-include-markdown-plugin",
  "pre-commit",
  "tbump",
]

[project.scripts]
agiletest = "agiletest_cli:cli"


############### tbump ###############
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.0.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
